#!/usr/bin/env node

require('../lib/helpers')();

let dotenv_file = require('path').resolve(
  __dirname + "/../../.env"
);

// load .env file
require('dotenv').config({ path: dotenv_file });

let app,
	debug = require('debug')('jsmarka:server'),
	http = require('http'),
	fs = require('fs'),
	url = require('url'),

	inquirer = require('inquirer'),
	cmd = require('commander'),
	shell = require('shelljs');


let server_port = normalizePort(process.env.PORT) || 3000,

	scriptName = process.argv[1].split('/').pop();


if ((process.argv[2]+'').match(/^(-h.*|--help)$/i)) {
	cmd.outputHelp(()=>`\n A JavaScript Code-Performance Benchmarking App\n`);
}


///////////////
// cli setup //
///////////////


let startServer = true; // should we start the server ?

cmd.version(require('../../package.json').version);

// port
cmd.option('-p, --port <port>', 'port to run on', function (port) {
	port = normalizePort(port);
	if (port) {
		server_port = port;
	} else {
		err_msg('-p port must be numeric');
	}
});


// log
cmd.option('--log', 'log http-requests', function () {
	process.env.LOG = true;
});


// config
cmd.option('-s, --setup', 'setup jsmarka', function () {
	if (!startServer) process.exit(1);

	startServer = false;

	let dotenv_string = "";

	let [app_port, githubid, githubsecret, githubcb] = [{
		name: "port",
		message: "Enter PORT",
		default: server_port,
		validate: p => isNumber(p)
	}, {
		name: "id",
		message: "Enter Your Github App ID",
		default: process.env.GITHUB_clientID,
		validate: (p) => (''+p).length > 10
	}, {
		name: "secret",
		message: "Enter Your Github App Secret",
		default: process.env.GITHUB_clientSECRET,
		validate: (p) => (''+p).length > 10
	},{
		name: "callback",
		message: "Enter Your Github Callback URL",
		default: process.env.GITHUB_callbackURL,
		validate: function (p){
			p = p + '';

			let done = this.async();

			setTimeout(()=>{
				if (!p.match(/^https?:\/\/(.+)/i)){
					done("Not a valid URL, must start with 'http://'");
					return false;
				}
				done(null, true);
			}, 1);
		}
	}];


	inquirer.prompt([app_port, githubid, githubsecret, githubcb])
	.then((answers) => {

dotenv_string = `
PORT = ${(''+answers.port).trim()}

NODE_ENV = development

GITHUB_clientID = ${(''+answers.id).trim()}
GITHUB_clientSECRET = ${(''+answers.secret).trim()}
GITHUB_callbackURL = ${(''+answers.callback).trim()}
`;

		fs.writeFile(dotenv_file, dotenv_string, (err)=>{
			if (err){
				err_msg(err);
			}

			console.log(`\n JsMarka configured! \n`);
		});

	})
	.catch(a=>{
		err_msg(a);
	});
});


// list config info
cmd.option('-l, --list', 'see setup information', function () {
	if (!startServer) process.exit(1);

	startServer = false;

	fs.readFile(dotenv_file, function (err, d){
		if (err){
			if (err.code === 'ENOENT'){
				err_msg(`JsMarka not configured yet`);
			}
			err_msg(err);
		}

		console.log(d+'');
	});
});


// update
cmd.option('-u, update', 'update jsmarka', function () {
	if (!startServer) process.exit(1);

	startServer = false;

	var child = shell.exec('npm i -g jsmarka@latest', {async:true});
	child.stdout.on('data', function(data) {
		console.log(data);
	});
});


// --no-browser
cmd.option('--no-browser', 'start server without launching browser', function() {
	process.env.NO_BROWSER = true;
});


// example usage
cmd.on('--help', function (){
	console.log(`
  Example usage:

  $ ${scriptName} -p 3000  (starts jsmarka server on port 3000)
	`);
});

cmd.parse(process.argv);


///////////////////////
// start http server //
///////////////////////

if (startServer){
	app = require('../app');

	app.set('port', server_port);

	const server = http.createServer(app);
	server.listen(server_port);


	// error handler
	server.on('error', (error) => {
		if (error.syscall !== 'listen') {
			throw error;
		}

		let bind = typeof server_port === 'string'
		  ? 'Pipe ' + server_port
		  : 'Port ' + server_port;

		switch (error.code) {
			case 'EACCES':
				err_msg(bind + ' requires elevated privileges');
				break;
			case 'EADDRINUSE':
				err_msg(bind + ' is already in use');
				break;
			default:
				throw error;
		}
	});


	// onlisten
	server.on('listening', () => {
		let addr = server.address();
		let bind = typeof addr === 'string'
		  ? 'pipe ' + addr
		  : 'port ' + addr.port;
		console.log('\n JsMarka Listening on ' + bind + '   (Ctrl-C to stop)\n');

		// open browser
		if (!process.env.NO_BROWSER){
			require("openurl").open(`http://localhost:${server_port}/`);
		}
	});
}
